#!/usr/sbin/nft -f

# Available fw4 constants: (Note that *_subnets contains both ip and ip6 addresses.)
#   lan_devices, lan_subnets
#   wan_devices, wan_subnets
define tproxy_mark = 0x01
define dns_mark    = 0x03
define dns_port    = 10053
define socks_port  = 10080
define http_port   = 10081
define tproxy_port = 10083

set direct_macs {
    type ether_addr
    elements = {
        00:11:32:ac:77:2e, # synonas eth0
        64:ff:0a:4b:8c:c1, # Sony-TV WiFi
        70:85:c2:da:43:f4, # Rundong-Gaming-PC, Intel I219-V interface.
        70:85:c2:da:43:f6, # Rundong-Gaming-PC, another ethernet interface.
        00:e4:21:6a:eb:a3, # PS5 WiFi
        00:e4:21:fd:9f:0b, # PS5 Ethernet
        16:43:4b:30:19:84, # qemu-win10-compute
        a6:3e:aa:1f:1d:57, # win-11-nv-work
        9c:fc:e8:de:d3:de, # davidli-lt
        54:ef:44:34:35:86, # Living room camera
        54:ef:44:2e:b1:62  # Bedroom gateway
    }
}

set local_ipv4 {
    type ipv4_addr
    flags interval
    auto-merge
    elements = {
        0.0.0.0/8,
        10.0.0.0/8,
        127.0.0.0/8,
        169.254.0.0/16,
        172.16.0.0/12,
        192.168.0.0/16,
        224.0.0.0/4,
        240.0.0.0/4
    }
}

set local_ipv6 {
    type ipv6_addr
    flags interval
    auto-merge
    elements = {
        ::/128,
        ::1/128,
        ::ffff:0:0/96,
        ::ffff:0:0:0/96,
        64:ff9b::/96,
        100::/64,
        2001::/32,
        2001:20::/28,
        2001:db8::/32,
        2002::/16,
        fc00::/7,
        fe80::/10,
        ff00::/8
    }
}

chain mangle_prerouting_custom {
    type filter hook prerouting priority mangle - 1; policy accept;
    # 1. Do not touch direct-to-wan packets.
    ether saddr @direct_macs return
    # 2. Mark and accept DNS packets, they will be redirted to Clash DNS port by NAT rules later.
    iifname $lan_devices udp dport 53 meta mark set $dns_mark return
    # 3. Bypass local connectons.
    ip daddr @local_ipv4 return
    ip6 daddr @local_ipv6 return
    # 4. Handle all remaining TCP and UDP packets by TProxy and route to lo later.
    iifname $lan_devices meta l4proto {tcp, udp} meta mark set $tproxy_mark tproxy to :$tproxy_port
}

chain dstnat_lan_custom {
    type nat hook prerouting priority dstnat - 1; policy accept;
    # 1. Finally, take care of DNS packets.
    udp dport 53 meta mark $dns_mark redirect to :$dns_port
}
